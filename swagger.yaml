swagger: "2.0"
info:
  description: "API template"
  version: "0.0.0"
  title: "API template"
host: "localhost:3000"
basePath: "/api/v1"
produces:
  - "application/json"
securityDefinitions:
  authorization:
    type: apiKey
    name: authorization
    in: header
paths:
  /customers:
    get:
      tags:
        - customers
      summary: Send a list of customers
      parameters:
        - name: firstname
          type: string
          in: query
          description: FirstName of the customers
        - name: lastname
          type: string
          in: query
          description: LastName of the customers
        - name: city
          type: string
          in: query
          description: City of the customers
      responses:
        200:
          description: List of filtered customers according to the restrictions given via querystring
          schema:
            type: array
            items:
              $ref: "#/definitions/Customer"
        404:
          description:  Not found
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - customers
      summary: Return the new customer
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Customer"
      responses:
        201:
          description: Returns a new customer
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: Missing data
          schema:
            $ref: "#/definitions/Error"
        409:
          description: Customer already exists
          schema:
            $ref: "#/definitions/Error"
  /customers/{reference}:
    get:
      tags:
        - customers
      summary: Returns an unique customer
      parameters:
        - name: reference
          type: string
          required: true
          in: path
          description: The customer reference
      responses:
        200:
          description: Returns an unique customer
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: The given customer reference does not exists in database
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - customers
      summary: Update a given customer
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Customer"
        - name: reference
          type: string
          in: path
          description: The customer reference
      responses:
        200:
          description: Returns an unique customer
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: Missing data
          schema:
            $ref: "#/definitions/Error"
        404:
          description: The given data does not exists in database
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - customers
      summary: Delete a given customer
      parameters:
        - name: reference
          type: string
          in: path
          description: The customer reference
      responses:
        204:
          description: The customer has been deleted
        404:
          description: The given customer reference does not exists in database
          schema:
            $ref: "#/definitions/Error"
  /operations:
    get:
      tags:
        - operations
      summary: Returns a list of operations
      parameters:
        - name: type
          type: string
          in: query
          description: Type of operations
        - name: emetteur
          type: string
          in: query
          description: emetteur of operations
        - name: beneficiaire
          type: string
          in: query
          description: beneficiaire of operations  
      responses:
        200:
          description: List of filtered operations according to the restrictions given via querystring
          schema:
            type: array
            items:
              $ref: "#/definitions/Operation"
        404:
          description:  Not found
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - operations
      summary: Return the new operation
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Operation"
      responses:
        201:
          description: Returns a new operation
          schema:
            $ref: "#/definitions/Operation"
        400:
          description: Missing data
          schema:
            $ref: "#/definitions/Error"
        409:
          description: Operation already exists
          schema:
            $ref: "#/definitions/Error"
  /operations/{reference}:
    get:
      tags:
        - operations
      summary: Returns an unique operation
      parameters:
        - name: reference
          type: string
          required: true
          in: path
          description: The operation reference
      responses:
        200:
          description: Returns an unique operation
          schema:
            $ref: "#/definitions/Operation"
        404:
          description: The operation reference does not exists in database
          schema:
            $ref: "#/definitions/Error"
  /accounts:
    get:
      tags:
        - accounts
      summary: Returns a list of account
      parameters:
        - name: type
          type: string
          in: query
          description: Type of the account
        - name: reference
          type: string
          in: query
          description: reference of the account
      responses:
        200:
          description: List of filtered account according to the restrictions given via querystring
          schema:
            type: array
            items:
              $ref: "#/definitions/Account"
        404:
          description:  Not found
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - accounts
      summary: Return the new account
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Account"
      responses:
        201:
          description: Created account
          schema:
            $ref: "#/definitions/Account"
        400:
          description: Missing data
          schema:
            $ref: "#/definitions/Error"
        409:
          description: Account already exists 
          schema:
            $ref: "#/definitions/Error"
  /accounts/{number}:
    get:
      tags:
        - accounts
      summary: Returns a given account
      parameters:
        - name: number
          type: string
          required: true
          in: path
          description: The customer number
      responses:
        200:
          description: Returns all account of the number
          schema:
            $ref: "#/definitions/Account"
        404:
          description: The given customer number does not exists in database
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - accounts
      summary: Update a given account
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Account"
        - name: number
          type: string
          in: path
          description: The account number
      responses:
        200:
          description: Update a unique account
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: Reference can not be updated
          schema:
            $ref: "#/definitions/Error"
        404:
          description: The given number does not exists in database
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - accounts
      summary: Delete a given account
      parameters:
        - name: number
          type: string
          in: path
          description: The account number
      responses:
        204:
          description: The account has been deleted
        404:
          description: The given account number does not exists in database
          schema:
            $ref: "#/definitions/Error"
definitions:
  Customer:
    type: object
    properties:
      firstname:
        type: string
        description: The customer's firstname
      lastname:
        type: string
        description: The customer's lastname
      city:
        type: string
        description: The customer's city
      reference:
        type: string
        description: The customer's reference
    example:
      reference: "JS_1234"
      firstname: "John"
      lastname: "Smith"
      city: "London"
  Operation:
    type: object
    properties:
      reference:
        type: string
        description: The Operation's reference
      emetteur:
        type: string
        description: The Operation's emetteur
      beneficiaire:
        type: string
        description: The Operation's beneficiaire
      montant:
        type: number
        description: The Operation's montant
      type:
        type: string
        description: The Operation's type
    example: 
      reference: "R_100"
      emetteur: "ACC_1"
      beneficiaire: "ACC_2"
      montant: 150
      type: "versement"
  Account:
    type: object
    properties:
      number:
        type: string
        description: Account's number
      reference:
        type: string
        description: Customer's reference of the account
      type:
        type: string
        description: Account's type
      amount:
        type: number
        description: Account's amount available
    example:
      number: "ACC_1"
      reference: "JS_1234"
      type: "Livret A"
      amount: 4500
  Error:
    type: object
    properties:
      message:
        type: string
    example:
      message: Description error
